# Tables
+-----------------+
| This is a table |
+-----------------+

|------------|
|Also a table|
|------------|

# Outline samples
This page contains a variety of outline types to use for manual testing

## Outline indented with spaces
* Todo level 1
  * Todo level 2a
    with some text on the next line
  * Todo level 2b
    * Todo level 3a
	    * Todo level 4a
    * Todo level 3b
        * Todo level 4b
	      * Todo level 5
          * Todo level 6

- Todo level 1
  - Todo level 2a
    with some text on the next line
  - Todo level 2b
    - Todo level 3a
      - Todo level 4b
        - Todo level 5
        - Todo level 6

+ Todo level 1
  + Todo level 2a
    with some text on the next line
  + Todo level 2b
    + Todo level 3a
    + Todo level 4b
      + Todo level 5
      + Todo level 6

## Outline indented with stacks
* Todo level 1
** Todo level 2a
*** Todo level 3a
**** Todo level 4a
*** Todo level 3b
**** Todo level 4b
***** Todo level 5
****** Todo level 6

## Outline with numbers
1. Level 1
2. Also Level 1

## Outlines with embedded tables
* Some
  * Embedding
    +-------+
    | table |

## Links
* [Organized Github Account](https://github.com/MattFlower/organized)
* abc

## TODO items
* [TODO] One todo
* [DONE] Already completed todo

## Code Highlighting
* Highlighting is available in several languages
  * C
    * Jira-style
      ```c
      #include <stdio.h>

      int main() {
        printf("Hello, world\n");
      }
      ```
      ```result
      : Hello, world
      ```
  * CPP
    * Jira-style
      ```cpp
      #include <iostream>

      int main() {
        std::cout << "Hello, world!" << std::endl;
      }
      ```
      ```result
      : Hello, world!
      ```
  * Coffeescript
    * Jira-style
      ```coffee
      test = (message) ->
        console.log(message)

      test('Hi')
      ```
  * CSS
    * Jira-style
      ```css
      a.href {
          color: red
      }
      ```
    * Org-mode style
      #+BEGIN_SRC css
      a.href {
          color:read
      }
      #+END_SRC
  * Golang
    * Jira-style
      ```go
      package main

      import "fmt"

      func main() {
      	fmt.Println("Hello, world")
      }
      ```
    *
  * Java
    * Jira-style
      ```java
      public class Test {
        public static void main(String[] args) {
          System.out.println("ABC");
        }
      }
      ```
      ```result
      : ABC
      ```
    * Org-mode style
      #+BEGIN_SRC java
      public class Test {
        public static void main(String[] args) {
          System.out.println("Test");
        }
      }
      #+END_SRC
  * Javascript
    * Jira-style
      ```javascript
      console.log("Test");
      ```
    * Org-mode style
      #+BEGIN_SRC javascript
      console.log("Test");
      #+END_SRC
  * Less
    * Org-mode style
      #+BEGIN_SRC less
      atom-text-editor, atom-text-editor::shadow {
        .organized {
          .header.level1.symbol, .header.level1.line {
            font-weight: bolder;
            color: @text-color-selected;
          }
      }
      #+END_SRC
  * Objective C
    * Jira-style
      ```objc
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[])
      {
          NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
          NSLog(@"Hello, World!");
          [pool drain];
          return 0;
      }
      ```
      ```result
      ! 2016-08-30 11:57:42.513 test[89128:6010778] Hello, World!
      ```
  * Perl
    * Jira-style
      ```perl
      use strict;
      use warnings;

      print "Hello, world\n";
      ```
  * PHP
    * Jira-style
      ```php
      <html>
      <body>
      <?php echo '<p>Hello World</p>'; ?>
      </body>
      </html>
      ```

      ```result
      : <html>
      : <body>
      : <p>Hello World</p></body>
      : </html>
      ```
  * Python
    * Jira-style
      ```python
      print [i*2 for i in range(1,10)]
      ```

      ```result
      : [2, 4, 6, 8, 10, 12, 14, 16, 18]
      ```
    * Org-mode style
      #+BEGIN_SRC python
      print [i*2 for i in range(1,10)]
      #+END_SRC
  * Shell (Generic)
    * Jira-style
      ```shell
      for dir in `ls -la *`; do
        echo "Some dir: $dir"
      done
      ```
    * Org-mode Style
      #+BEGIN_SRC shell
      for dir in `ls -la *`; do
        echo "Some dir: $dir"
      done
      #+END_SRC
  * SQL
    * Jira-style
      ```sql
      SELECT * FROM DUAL
      ```
    * Org-mode style
      #+BEGIN_SRC sql
      SELECT * FROM DUAL
      #+END_SRC
